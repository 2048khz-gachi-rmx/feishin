generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "orderByNulls", "filteredRelationCount", "fieldReference"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ServerType {
  SUBSONIC
  JELLYFIN
  NAVIDROME
}

enum ServerPermissionType {
  ADMIN
  EDITOR
  VIEWER
}

enum ExternalSource {
  MUSICBRAINZ
  LASTFM
  THEAUDIODB
  SPOTIFY
}

enum ExternalType {
  ID
  LINK
}

enum ImageType {
  PRIMARY
  BACKDROP
  LOGO
  SCREENSHOT
}

enum TaskType {
  FULL_SCAN
  QUICK_SCAN
  REFRESH
  SPOTIFY
  MUSICBRAINZ
  LASTFM
}

model RefreshToken {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token String @unique

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String   @unique
  password  String
  enabled   Boolean  @default(false)
  isAdmin   Boolean  @default(false)
  deviceId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites          Favorite[]
  histories          History[]
  albumArtistRatings AlbumArtistRating[]
  artistRatings      ArtistRating[]
  albumRatings       AlbumRating[]
  songRatings        SongRating[]
  refreshTokens      RefreshToken[]

  serverFolderPermissions ServerFolderPermissions[]
  serverPermissions       ServerPermissions[]
}

model History {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  songs Song[]

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
}

model Server {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  url          String     @unique
  remoteUserId String
  username     String
  token        String
  type         ServerType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  albumArtists      AlbumArtist[]
  artists           Artist[]
  albums            Album[]
  songs             Song[]
  serverFolders     ServerFolder[]
  serverUrls        ServerUrl[]
  folders           Folder[]
  serverPermissions ServerPermissions[]
  tasks             Task[]
}

model Folder {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  path      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songs         Song[]
  serverFolders ServerFolder[]

  parentId String?  @db.Uuid
  parent   Folder?  @relation("FolderChildren", fields: [parentId], references: [id])
  children Folder[] @relation("FolderChildren")

  Server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid

  @@unique(fields: [serverId, path], name: "uniqueFolderId")
}

model ServerPermissions {
  id        String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      ServerPermissionType
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid

  @@unique(fields: [userId, serverId], name: "uniqueServerPermissionsId")
}

model ServerUrl {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid

  @@unique(fields: [serverId, url], name: "uniqueServerUrlId")
}

model ServerFolder {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  remoteId  String   @unique
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  albumArtists            AlbumArtist[]
  artists                 Artist[]
  albums                  Album[]
  songs                   Song[]
  folders                 Folder[]
  serverFolderPermissions ServerFolderPermissions[]

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid

  @@unique(fields: [serverId, remoteId], name: "uniqueServerFolderId")
}

model ServerFolderPermissions {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  serverFolder   ServerFolder @relation(fields: [serverFolderId], references: [id], onDelete: Cascade)
  serverFolderId String       @db.Uuid

  @@unique(fields: [userId, serverFolderId], name: "uniqueServerFolderPermissionsId")
}

model Genre {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  albumArtists AlbumArtist[]
  artists      Artist[]
  albums       Album[]
  songs        Song[]
}

model Favorite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  albumArtists AlbumArtist[]
  artists      Artist[]
  albums       Album[]
  songs        Song[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
}

model AlbumArtistRating {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  albumArtist   AlbumArtist @relation(fields: [albumArtistId], references: [id])
  albumArtistId String      @db.Uuid
}

model ArtistRating {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String @db.Uuid
}

model AlbumRating {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  album   Album  @relation(fields: [albumId], references: [id])
  albumId String @db.Uuid
}

model SongRating {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  song   Song?   @relation(fields: [songId], references: [id])
  songId String? @db.Uuid
}

model Image {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url       String?
  remoteUrl String
  type      ImageType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  albumArtists AlbumArtist[]
  artists      Artist[]
  albums       Album[]
  songs        Song[]

  @@unique(fields: [remoteUrl, type], name: "uniqueImageId")
}

model External {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value     String
  type      ExternalType
  source    ExternalSource
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  albumArtists AlbumArtist[]
  artists      Artist[]
  albums       Album[]
  songs        Song[]

  @@unique(fields: [value, source], name: "uniqueExternalId")
}

model AlbumArtist {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  sortName        String
  biography       String?
  remoteId        String
  remoteCreatedAt DateTime?
  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  albums        Album[]
  genres        Genre[]
  externals     External[]
  serverFolders ServerFolder[]
  ratings       AlbumArtistRating[]
  images        Image[]
  favorites     Favorite[]

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid

  @@unique(fields: [serverId, remoteId], name: "uniqueAlbumArtistId")
}

model Album {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  sortName        String
  releaseDate     DateTime?
  releaseYear     Int?
  remoteId        String
  remoteCreatedAt DateTime?
  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  songs         Song[]
  genres        Genre[]
  artists       Artist[]
  externals     External[]
  serverFolders ServerFolder[]
  ratings       AlbumRating[]
  images        Image[]
  favorites     Favorite[]

  albumArtist   AlbumArtist? @relation(fields: [albumArtistId], references: [id])
  albumArtistId String?      @db.Uuid

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid

  @@unique(fields: [serverId, remoteId], name: "uniqueAlbumId")
}

model Artist {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  sortName        String
  biography       String?
  remoteId        String
  remoteCreatedAt DateTime?
  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  genres        Genre[]
  albums        Album[]
  songs         Song[]
  externals     External[]
  serverFolders ServerFolder[]
  ratings       ArtistRating[]
  images        Image[]
  favorites     Favorite[]

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid

  @@unique(fields: [serverId, remoteId], name: "uniqueArtistId")
}

model Song {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  sortName        String
  releaseDate     DateTime?
  releaseYear     Int?
  duration        Float
  size            Int?
  lyrics          String?
  bitRate         Int
  container       String
  discNumber      Int       @default(1)
  trackNumber     Int?
  artistName      String?
  remoteId        String
  remoteCreatedAt DateTime?
  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  genres        Genre[]
  artists       Artist[]
  externals     External[]
  folders       Folder[]
  serverFolders ServerFolder[]
  histories     History[]
  ratings       SongRating[]
  images        Image[]
  favorites     Favorite[]

  album   Album?  @relation(fields: [albumId], references: [id])
  albumId String? @db.Uuid

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid

  @@unique(fields: [serverId, remoteId], name: "uniqueSongId")
}

model Task {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  type      TaskType
  message   String?
  progress  String?
  completed Boolean  @default(false)
  isError   Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.Uuid
}
